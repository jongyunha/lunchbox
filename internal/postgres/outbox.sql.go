// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: outbox.sql

package postgres

import (
	"context"
)

const findRestaurantUnpublishedOutboxMessages = `-- name: FindRestaurantUnpublishedOutboxMessages :many
SELECT id, name, subject, data FROM restaurants.outbox WHERE published_at IS NULL LIMIT $1
`

type FindRestaurantUnpublishedOutboxMessagesRow struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	Subject string `json:"subject"`
	Data    []byte `json:"data"`
}

func (q *Queries) FindRestaurantUnpublishedOutboxMessages(ctx context.Context, limit int32) ([]FindRestaurantUnpublishedOutboxMessagesRow, error) {
	rows, err := q.db.Query(ctx, findRestaurantUnpublishedOutboxMessages, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindRestaurantUnpublishedOutboxMessagesRow
	for rows.Next() {
		var i FindRestaurantUnpublishedOutboxMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Subject,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markRestaurantOutboxMessageAsPublishedByIDs = `-- name: MarkRestaurantOutboxMessageAsPublishedByIDs :exec
UPDATE restaurants.outbox
SET published_at = CURRENT_TIMESTAMP
WHERE id = ANY($1::string[])
`

func (q *Queries) MarkRestaurantOutboxMessageAsPublishedByIDs(ctx context.Context, dollar_1 []string) error {
	_, err := q.db.Exec(ctx, markRestaurantOutboxMessageAsPublishedByIDs, dollar_1)
	return err
}

const saveRestaurantOutboxMessage = `-- name: SaveRestaurantOutboxMessage :one
INSERT INTO restaurants.outbox (id, name, subject, data) VALUES ($1, $2, $3, $4) RETURNING id
`

type SaveRestaurantOutboxMessageParams struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	Subject string `json:"subject"`
	Data    []byte `json:"data"`
}

func (q *Queries) SaveRestaurantOutboxMessage(ctx context.Context, arg SaveRestaurantOutboxMessageParams) (string, error) {
	row := q.db.QueryRow(ctx, saveRestaurantOutboxMessage,
		arg.ID,
		arg.Name,
		arg.Subject,
		arg.Data,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
