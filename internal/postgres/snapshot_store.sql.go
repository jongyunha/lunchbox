// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: snapshot_store.sql

package postgres

import (
	"context"
)

const loadSnapshot = `-- name: LoadSnapshot :one
SELECT stream_version, snapshot_name, snapshot_data
FROM restaurants.snapshots
WHERE stream_id = $1 AND stream_name = $2
LIMIT 1
`

type LoadSnapshotParams struct {
	StreamID   string `json:"stream_id"`
	StreamName string `json:"stream_name"`
}

type LoadSnapshotRow struct {
	StreamVersion int32  `json:"stream_version"`
	SnapshotName  string `json:"snapshot_name"`
	SnapshotData  []byte `json:"snapshot_data"`
}

func (q *Queries) LoadSnapshot(ctx context.Context, arg LoadSnapshotParams) (LoadSnapshotRow, error) {
	row := q.db.QueryRow(ctx, loadSnapshot, arg.StreamID, arg.StreamName)
	var i LoadSnapshotRow
	err := row.Scan(&i.StreamVersion, &i.SnapshotName, &i.SnapshotData)
	return i, err
}

const saveSnapshot = `-- name: SaveSnapshot :exec
INSERT INTO restaurants.snapshots (stream_id, stream_name, stream_version, snapshot_name, snapshot_data)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (stream_id, stream_name) DO UPDATE
SET stream_version = EXCLUDED.stream_version,
    snapshot_name = EXCLUDED.snapshot_name,
    snapshot_data = EXCLUDED.snapshot_data
`

type SaveSnapshotParams struct {
	StreamID      string `json:"stream_id"`
	StreamName    string `json:"stream_name"`
	StreamVersion int32  `json:"stream_version"`
	SnapshotName  string `json:"snapshot_name"`
	SnapshotData  []byte `json:"snapshot_data"`
}

func (q *Queries) SaveSnapshot(ctx context.Context, arg SaveSnapshotParams) error {
	_, err := q.db.Exec(ctx, saveSnapshot,
		arg.StreamID,
		arg.StreamName,
		arg.StreamVersion,
		arg.SnapshotName,
		arg.SnapshotData,
	)
	return err
}
